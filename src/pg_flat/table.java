/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pg_flat;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author rasika mate
 */
public class table extends javax.swing.JFrame {
private JFrame frame;
    private JTable table;
    
    /**
     * Creates new form table
     */
    public table() {
        initComponents();
       frame = new JFrame("View Property");
JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());
        frame.add(panel);
        
        
        
        table = new JTable();
        table.setRowHeight(100);
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("SelectedItem");
        model.addColumn("Square Ft");
        model.addColumn("Owner ID");
        model.addColumn("Price");
        model.addColumn("Bed");
        model.addColumn("Bath");
        model.addColumn("Age");
        model.addColumn("Address");
        model.addColumn("Image");
        table.setModel(model);

        try {
            Connection con = connectionprovider.getCon(); // Assuming you have a class named connectionprovider that provides the database connection.

            PreparedStatement statement = con.prepareStatement("SELECT id, selectedItem, square_f, owner_id, price, bed, bath, age, address, image FROM item");
            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String selectedItem = resultSet.getString("selectedItem");
                int square_f = resultSet.getInt("square_f");
                int owner_id = resultSet.getInt("owner_id");
                int price = resultSet.getInt("price");
                int bed = resultSet.getInt("bed");
                int bath = resultSet.getInt("bath");
                int age = resultSet.getInt("age");
                String address = resultSet.getString("address");
                Blob blob = resultSet.getBlob("image");

                InputStream inputStream = blob.getBinaryStream();
                BufferedImage bufferedImage = ImageIO.read(inputStream);
                ImageIcon imageIcon = new ImageIcon(bufferedImage);

                model.addRow(new Object[]{id, selectedItem, square_f, owner_id, price, bed, bath, age, address, imageIcon});
            }

            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
 ImageRenderer imageRenderer = new ImageRenderer();
        table.getColumnModel().getColumn(9).setCellRenderer(imageRenderer);

        frame.add(new JScrollPane(table));
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

        
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new table().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
class ImageRenderer extends DefaultTableCellRenderer {

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        if (value instanceof ImageIcon) {
            ImageIcon imageIcon = (ImageIcon) value;
            Image image = imageIcon.getImage();

            int maxWidth = table.getColumnModel().getColumn(column).getWidth(); // Get the maximum width of the column

            // Scale the image to fit within the column width while preserving the aspect ratio
            int newWidth = Math.min(maxWidth, image.getWidth(null));
            int newHeight = (int) ((double) newWidth / image.getWidth(null) * image.getHeight(null));
            Image scaledImage = image.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
            ImageIcon scaledIcon = new ImageIcon(scaledImage);
            setIcon(scaledIcon);
        }
        return this;
    }
}











